—————————————GM35/GM5解密—————————————
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int char2num(char ch)
{
    if (ch >= 'a')
        return ch - 'a' + 10;
    else if (ch >= 'A')
        return ch - 'A' + 10;
    else
        return ch - '0';
}

void *wh_HexSring2String(unsigned char *dest, unsigned char *src, unsigned char len)
{
    unsigned char i = 0;
    unsigned char j = 0;
    unsigned char n = 0;

    for (i = 0; i < len; i += 2)
    {
        n = char2num(src[i]) * 16 + char2num(src[i + 1]);
        dest[j++] = n;
    }
}
unsigned char wh_Sring2HexString(unsigned char *dest, unsigned char *src, unsigned int src_len)
{
    unsigned char i = 0;
    unsigned char j = 0;
    unsigned char n = 0;
	const char* cHex = "0123456789ABCDEF";
    for (i = 0; i < src_len; i++)
    {
    	unsigned int a =  (unsigned int) src[i];
    	dest[j++] = cHex[(a & 0xf0) >> 4];
        dest[j++] = cHex[(a & 0x0f)];
        //n = char2num(src[i]) * 16 + char2num(src[i + 1]);
        //dest[j++] = n;
    }
	dest[j] = '\0';
}

//加密
static void tea_encrypt(unsigned int *v,unsigned int *k) 
{
	unsigned int y = v[0],z = v[1],sum = 0,i;        
    unsigned int delta = 0x9e3779b9;                
	unsigned int a = k[0],b = k[1],c = k[2],d = k[3];  
	for (i = 0;i < 32;i++) 
	{                        
		sum += delta;
		y += ((z << 4) + a) ^ (z + sum) ^ ((z >> 5) + b);
		z += ((y << 4) + c) ^ (y + sum) ^ ((y >> 5) + d);
	}
	v[0] = y;
	v[1] = z;
}
//解密
static void TeaDecrypt( unsigned int *key, unsigned int *val )
{
    unsigned int y = val[0], z = val[1];
    unsigned int sum = 0xC6EF3720, i; /* set up */
    unsigned int delta = 0x9e3779b9;                  /* a key schedule constant */
    unsigned int a = key[0], b = key[1], c = key[2], d = key[3];    /* cache key */

    for(i = 0; i < 32; i++)
    {
        z -= ((y << 4) + c) ^ (y + sum) ^ ((y >> 5) + d);
        y -= ((z << 4) + a) ^ (z + sum) ^ ((z >> 5) + b);
        sum -= delta;
    }

    val[0] = y;
    val[1] = z;
}
unsigned int encrypt_code[2];

unsigned char wh_check_encrypt( void )
{
    char tempbuf[3] = {0};
    unsigned char nImei[16] = {0};
    unsigned int i = 0;
    unsigned int sn[4];
    unsigned int decrypt_val[2];
    unsigned int encrypt_key[4] = { 0x12345678, 0xAA55AA55, 0x87654321, 0x55AA55AA };

    decrypt_val[0] = encrypt_code[0];
    decrypt_val[1] = encrypt_code[1];
    TeaDecrypt( encrypt_key, decrypt_val );

    unsigned char nImeiLen;
    unsigned char g_nImei[15];	
	g_nImei[0]='8';
	g_nImei[1]='6';
	g_nImei[2]='4';
	g_nImei[3]='3';
	g_nImei[4]='3';
	g_nImei[5]='3';
	g_nImei[6]='0';
	g_nImei[7]='4';
	g_nImei[8]='0';
	g_nImei[9]='7';
	g_nImei[10]='1';
	g_nImei[11]='1';
	g_nImei[12]='7';
	g_nImei[13]='5';
	g_nImei[14]='6';
    sprintf(nImei, "0%s", g_nImei);

    for(i = 0; i < 16; i += 2)
    {
        tempbuf[0] = nImei[i];
        tempbuf[1] = nImei[i + 1];
        tempbuf[2] = 0;
        nImei[i / 2] = strtol(tempbuf, NULL, 16);
    }
    sn[0] = ( ((unsigned int)nImei[3]) << 24 ) +  ( ((unsigned int)nImei[2]) << 16 ) + ( ((unsigned int)nImei[1]) << 8 ) + ((unsigned int)nImei[0]);
    sn[1] = ( ((unsigned int)nImei[7]) << 24 ) +  ( ((unsigned int)nImei[6]) << 16 ) + ( ((unsigned int)nImei[5]) << 8 ) + ((unsigned int)nImei[4]);

    if ( sn[0] == decrypt_val[0] && sn[1] == decrypt_val[1] )
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int wh_encripty_enter(char *data)
{
    char en_data[8] = {0};

    if(strlen(data) == 16)
    {
        wh_HexSring2String(en_data, data, 16);

        encrypt_code[0] = ( ((unsigned int)(en_data[3] & 0x000000FF)) << 24 ) +  ( ((unsigned int)(en_data[2] & 0x000000FF)) << 16 ) + ( ((unsigned int)(en_data[1] & 0x000000FF)) << 8 ) + ((unsigned int)(en_data[0] & 0x000000FF));
        encrypt_code[1] = ( ((unsigned int)(en_data[7] & 0x000000FF)) << 24 ) +  ( ((unsigned int)(en_data[6] & 0x000000FF)) << 16 ) + ( ((unsigned int)(en_data[5] & 0x000000FF)) << 8 ) + ((unsigned int)(en_data[4] & 0x000000FF));
		printf("encrypt_code:%d,%d\r\n",encrypt_code[0],encrypt_code[1]);
		return 1;
    }
    else
    {
        return 0;
    }
}

int main()
{
	//printf("main start......\n");
	//Static_Print();
	//Dynamic_Print();
	unsigned char imei[16]={0};//864333040711756
    unsigned char nImei[16] = {0};
    char tempbuf[3] = {0};
    unsigned int i = 0;
	unsigned int sn[4];
    unsigned int decrypt_val[2];
    unsigned char en_data[8] = {0};
    unsigned char input_key[16] = {0};
    unsigned int encrypt_key[4] = { 0x12345678, 0xAA55AA55, 0x87654321, 0x55AA55AA };
	printf("please you input your imei:");
	scanf("%s",imei);
    sprintf(nImei, "0%s", imei);
	printf("imei is:%s\r\n\r\n",nImei);
	for(i = 0; i < 16; i += 2)
    {
        tempbuf[0] = nImei[i];
        tempbuf[1] = nImei[i + 1];
        tempbuf[2] = 0;
        nImei[i / 2] = strtol(tempbuf, NULL, 16);
    }
	sn[0] = ( ((unsigned int)nImei[3]) << 24 ) +  ( ((unsigned int)nImei[2]) << 16 ) + ( ((unsigned int)nImei[1]) << 8 ) + ((unsigned int)nImei[0]);
    sn[1] = ( ((unsigned int)nImei[7]) << 24 ) +  ( ((unsigned int)nImei[6]) << 16 ) + ( ((unsigned int)nImei[5]) << 8 ) + ((unsigned int)nImei[4]);
	decrypt_val[0]=sn[0];
	decrypt_val[1]=sn[1];
	tea_encrypt(decrypt_val,encrypt_key);
	en_data[0]=decrypt_val[0]&0xFF;
	en_data[1]=(decrypt_val[0]>>8)&0xFF;
	en_data[2]=(decrypt_val[0]>>16)&0xFF;
	en_data[3]=(decrypt_val[0]>>24)&0xFF;
	en_data[4]=decrypt_val[1]&0xFF;
	en_data[5]=(decrypt_val[1]>>8)&0xFF;
	en_data[6]=(decrypt_val[1]>>16)&0xFF;
	en_data[7]=(decrypt_val[1]>>24)&0xFF;
	wh_Sring2HexString(input_key,en_data,8);
	printf("key is:%s\r\n",input_key);


	system("pause");
	return 0;
}
————————————————————————————————————————————————————